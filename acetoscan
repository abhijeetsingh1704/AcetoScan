#!/bin/bash

# File: AcetoScan
# Last modified: fre jul 19, 2019 20:44
# Sign: Abhi

set -euo pipefail

echo \
" ___________________________________________________________
|     _    ____ _____ _____ ___  ____   ____    _    _   _  |
|    / \  / ___| ____|_   _/ _ \/ ___| / ___|  / \  | \ | | |
|   / _ \| |   |  _|   | || | | \___ \| |     / _ \ |  \| | |
|  / ___ \ |___| |___  | || |_| |___) | |___ / ___ \| |\  | |
| /_/   \_\____|_____| |_| \___/|____/ \____/_/   \_\_| \_| |
|___________________________________________________________|
"

###    Recording the time whent he script was started

start=$(date +%s) #start time of script

###     Setting up variables

input_dir=""            
output_dir=""           
read_type=""
max_len=""
min_len=""
qual=""            
cluster_threshold=""

###     Username

user=`echo ${SUDO_USER:-${USER}}`

###     Defaults

output_dir_def="/home/$user/acetoscan/output_data"
read_type_def="1"
max_len_def="277"
min_len_def="150"
qual_def="20" 
cluster_threshold_def="0.95"
version_def="0.1.0"

###    Getting processors information

THREADS=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null || getconf _NPROCESSORS_ONLN 2> /dev/null)

###     Defining flags

#       function

usage() {
echo "Usage   : $0 [-i <input directory>] [-o <output directory>] [-m <max_length>] [-n <min_length>] [-q <quality threshold>] [-r <reads type>] [-t <clustering threshold>]
Example : acetoscan -i /<input path>/ -o /<output path>/ -m 277 -n 150 -q 20 -r 1 -t 0.95" 1>&2; exit 1;
}


#       flags

while getopts "i:o:m:n:q:r:t:hv" flags; 
        do      
                case "${flags}" in
                        
                        i)
                                input_dir=${OPTARG}
                                ;;

                        o)
                                output_dir=${OPTARG}
                                ;;

                        m)
                                max_len=${OPTARG}
                                ;;

                        n)
                                min_len=${OPTARG}
                                ;;

                        q)
                                qual=${OPTARG}
                                ;;
                        
                        r)
                                read_type=${OPTARG}
                                ;;

                        t)
                                cluster_threshold=${OPTARG}
                                ;;

                        h)
                                echo "
Example : acetoscan -i /<input path>/ -o /<output path>/ -m 277 -n 150 -q 20 -r 1 -t 0.95

        -i      input directory containing raw illumina data
        -o      output directory
                default = /home/${user}/acetoscan/output_data
        -m      maximum length of sequence after quality filtering
                defalut max_length = 277
        -n      minimum length of sequence after quality filtering
                defalut min_length = 150
        -q      Quality threshold for the sequences 
                default quality threshold = 20
        -r      read type either forward or reverse reads 
                default read = 1        
                1 = forward reads
                2 = reverse reads
        -t      clustering threshold
                default = 0.95 (95% sequence similarity)      
        -h      print Help
        -v      print acetoscan version"
                                exit                                
                                ;;

                        v)
                                echo "AcetoScan version: ${version_def}"
                                echo "Visit \"https://acetobase.molbio.slu.se/\" for more information."
                                exit
                                ;;

                        *)
                                usage
                                exit
                                ;;

                        :)      
                                usage
                                exit
                                ;;
                        
                        \?)
                                usage
                                exit
                                ;;

                esac
        done

shift $((OPTIND-1))

###     check

if ((OPTIND == 1));then
echo -e "\n#Input directory not provided, Aborting!"
        echo ""
        usage
        exit
fi


###     Checking input_dir 

if [ ! -d "$input_dir" ] && [ -x "$input_dir" ]; then
        echo -e "\n#Input directory not provided, Aborting!"
        echo ""
        usage
        exit
else
        echo -e "\n#Content of input directory: $input_dir"        
        forward_read_count=$(find "$input_dir" -name '*_R1_001.fastq.gz' | wc -l)
        reverse_read_count=$(find "$input_dir" -name '*_R2_001.fastq.gz' | wc -l)
        echo "-> Number of forward read files: $forward_read_count"
        echo "-> Number of reverse read files: $reverse_read_count"
        
        
fi

###     Checking output_dir 


if [ "$output_dir" == "" ]; then
        output_dir="$output_dir_def"
        echo -e "\n#Using default output directory: $output_dir_def"
        if [ -d "$output_dir_def" ] ; then
                echo -ne ""
        else
                mkdir -p "$output_dir_def"
        fi
else
        if [  -d "$output_dir" ] && [ -x "$output_dir" ]; then
                echo -e "\n#Output directory: $output_dir "
        else
                if [ ! -d "$output_dir" ]; then   
                        mkdir -p "$output_dir"
                        echo -e "\n#Output directory: $output_dir "
                else
                       echo -e "\n#Cannot access/create $output_dir " 
                fi
        fi
fi

###     setting up working directory

export WKDIR="$output_dir"

###     Checking maximum length threshold

if [ "$max_len" == "" ];then
        max_len="$max_len_def"
        echo -e "\n#Using default max_length: 277"
else
       echo -e "\n#Using max_length: ${max_len}"
fi

###     Checking minimum length threshold

if [ "$min_len" == "" ];then
        min_len="$min_len_def"
        echo -e "\n#Using default min_length: 150"
else
       echo -e "\n#Using min_length: ${min_len}"
fi

###     Checking quality threshold

if [ "$qual" == "" ];then
        qual="$qual_def"
        echo -e "\n#Using default quality threshold: 20"
else
       echo -e "\n#Using quality threshold: ${qual}"
fi

###     Checking read type

if [ "$read_type" == "" ];then
        read_type="$read_type_def"
        echo -e "\n#Using default: Forward reads"
else
       echo -e "\n#Using R${read_type} reads"
fi

#       read variable

export reads="R${read_type}"
export MaxL="$max_len"
export MinL="$min_len"
export QT="$qual"

###     Checking read type

if [ "$cluster_threshold" == "" ];then
        cluster_threshold="$cluster_threshold_def"
        echo -e "\n#Using default clustering threshold: 0.95"
else
        echo -e "\n#Clustering threshold: $cluster_threshold"
fi

###    Checking threshold validity

MAXTHRESHOLD=1.0

if (( ${cluster_threshold%%.*} < ${MAXTHRESHOLD%%.*} || ( ${cluster_threshold%%.*} == ${MAXTHRESHOLD%%.*} \
    && ${cluster_threshold##*.} < ${MAXTHRESHOLD##*.} ) )) > /dev/null ; then    
    echo "" > /dev/null
else
    echo -e "\n#Invalid threshold: value must be between 0.0 and 1.0" && exit 1
fi

###     Checking of output_data directory is has content

###    Checking and cleaning the input_data and output_data directory

if [ ! -z "$(ls -A "$output_dir")" ]; then
   echo -e "\n#WARNING: directory \"$output_dir\" is not empty, 
          possibility of data loss!!!"

        #       Cleaning
        echo -e "\n#Removing previous data"
        rm -f ${WKDIR}/input_data/*
        rm -rf ${WKDIR}/output_data/*
        rm -f ${WKDIR}/acetoscan_result/*
else
        #       creating new directories
        echo -e "\n#Creating directories"
        mkdir -v -p "${WKDIR}/input_data"
        mkdir -v -p "${WKDIR}/output_data"
        mkdir -v -p "${WKDIR}/acetoscan_result"
fi

###    Checking dependencies

echo -e "\n#Performing dependencies check"
export PATH="/home/$user/acetoscan/acetoscan_bin/:${PATH}"
AcetoScan_software_check.sh # <======== External script

###    find illumina raw reads and making soft links to the data

if ! cd "${WKDIR}/input_data/" ; then
    echo "Error: could not cd to ${WKDIR}/input_data/"
    exit 1
fi

#       softlinks

find "${input_dir}" -name "*_${reads}_001.fastq.gz" -exec ln -s {} "${WKDIR}/input_data/" \; 2> /dev/null

###    Checking if link exist

if [ ! -n "$(find "${WKDIR}/input_data/" -maxdepth 1 -type l -name "*_${reads}_001.fastq.gz" -print -quit)" ] ; then
    echo "Input files \"*_${reads}*.fastq.gz\" not found in ${WKDIR}/input_data/, Aborting !!!"
    exit 1
fi

###    Adapter trimming and quality filtering of the raw reads

mkdir -p "${WKDIR}/output_data/trimmed"
echo -ne "\n#Performing adapters trimming and quality filtering"

###     CUTADAPT <--- from external script

        #       making progress bar for cudadapt script
                
        while true; do echo -ne "#"; sleep 1; done &
        trap 'kill $!' SIGTERM
        echo -ne "\n\n#This might take a while"
        echo -ne "\n[Processing:]"
        
        #cutadapt external script        
        AcetoScan_cutadapt.sh   # <============= external script
                
        echo ""
        kill $! 

###     Begin Longest best frame analysis <--- from external script

echo -ne "\n#Performing longest best frame analysis"

        #       making progress bar for best frame script

        while true; do echo -ne "#"; sleep 1; done &
        trap 'kill $!' SIGTERM
        echo -ne "\n\n#This might take a while"
        echo -ne "\n[Processing:]"

        #longorf-acetoscan external script
        
        find ${WKDIR}/output_data/trimmed/ -name "*_trimmed_${reads}.fasta" \
        -execdir sh -c 'f="{}"; b=$(basename "${f}" .fasta); AcetoScan_longorf.pl --filter "$f" > "Best_${b}.fasta"' \; # <============= external script
        
        echo ""        
        kill $! 

###     Preprocessing for Clustering

cd "${WKDIR}/output_data/trimmed"
echo -e "\n#Performing preprocessing for clustering"

#       Finding and replacing the fasta header with file name

find ${WKDIR}/output_data/ -type f -iname "Best*.fasta" -printf "%f\n" | while read x;
        do 
             awk '/^>/ {gsub(/.fa(sta)?$/,"",FILENAME);printf(">%s\n",FILENAME);next;} {print}' "${x}"
        done > All_best.fasta.tmp

###     Formating input for vsearch

perl -npe 'if(!/^>/){s/\S{60}/$&\n/g};{s/-/_/g}' All_best.fasta.tmp > All_best.fasta

###     Begin clustering with VSEARCH (v2.13.0_linux_x86_64)

mkdir -v -p "${WKDIR}/output_data/trimmed/VSEARCH"
echo -e "\n#Begin clustering at $cluster_threshold %"

    #   dereplication 

        echo -e "\n#Performing dereplication"
        vsearch \
                --derep_fulllength "${WKDIR}/output_data/trimmed/All_best.fasta" \
                --output "${WKDIR}/output_data/trimmed/VSEARCH/best_derep.fasta" \
                --sizeout \
                --minuniquesize 5 \
                --relabel Unique \
                --uc "${WKDIR}/output_data/trimmed/VSEARCH/derep.uc" \
                --log="${WKDIR}/output_data/trimmed/VSEARCH/derep_log"
    
    #   removing chimeras

        echo -e "\n#Removing chimera"
        vsearch \
                --uchime_denovo "${WKDIR}/output_data/trimmed/VSEARCH/best_derep.fasta" \
                --sizein \
                --sizeout \
                --chimeras "${WKDIR}/output_data/trimmed/VSEARCH/chimera.fasta" \
                --nonchimeras "${WKDIR}/output_data/trimmed/VSEARCH/nonchimera.fasta" \
                --log="${WKDIR}/output_data/trimmed/VSEARCH/chimera_log.txt"
    
    # Clustering OTUs

        echo -e "\n#Clustering OTUs at ${cluster_threshold} % sequence similarity"
        vsearch \
                --cluster_size "${WKDIR}/output_data/trimmed/VSEARCH/nonchimera.fasta" \
                --id "${cluster_threshold}" \
                --centroid "${WKDIR}/output_data/trimmed/VSEARCH/pre_OTU.fasta" \
                --otutabout "${WKDIR}/output_data/trimmed/VSEARCH/classic_pre_otu_table.txt" \
                --uc "${WKDIR}/output_data/trimmed/VSEARCH/clustering_result" \
                --sizein \
                --sizeout \
                --relabel 'OTU_' \
                --biomout "${WKDIR}/output_data/trimmed/VSEARCH/pre_OTUtable.biom.json"
    
###     End of clustering with VSEARCH


###     Preparing input file for filtering of non target sequences

perl -pe '/^>/ ? print "\n" : chomp' ./VSEARCH/pre_OTU.fasta | \
    sed '/^$/d' > "${WKDIR}/output_data/trimmed/VSEARCH/pre_OTU.fasta.tmp"

###    Filtering non target sequences with BlastX from NCBI Blast+ (2.8.1)

        echo -e "\n#Filtering non target OTUs"
        blastx \
                -query "${WKDIR}/output_data/trimmed/VSEARCH/pre_OTU.fasta.tmp" \
                -db "/home/$user/acetoscan/acetobase/AcetoBaseV1" \
                -task blastx \
                -max_target_seqs 1 \
                -num_threads "${THREADS}" \
                -evalue 10e-5 \
                -out "${WKDIR}/output_data/trimmed/VSEARCH/blast_results_for_filtering" \
                -outfmt "7 qseqid"

###     Processing blast result file, deleting commented lines
sed '/^#/d' ./VSEARCH/blast_results_for_filtering > "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU_list.txt"

###     Extracting target sequences

while read line;
        do
                grep -w -A 1 "$line" "${WKDIR}/output_data/trimmed/VSEARCH/pre_OTU.fasta.tmp" >> "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU.fasta.tmp"
        done < ${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU_list.txt

# processing filtered OTU multifasta file

sed -e 's/-/_/g;/^#/d' "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU.fasta.tmp" > "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU.fasta"

###    Generating OTU table with filtered/target OTUs

        echo -e "\n#Generating OTU table"
        vsearch \
                --usearch_global "${WKDIR}/output_data/trimmed/All_best.fasta" \
                --db "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU.fasta.tmp" \
                --id ${cluster_threshold} \
                --otutabout "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.tmp"

###     Processing Sample name

sed -e "s/Best_//g;s/_trimmed_${reads}//g" "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.tmp" > "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.pre"

###    Sorting OTUs in assending order

sed -e 's/#OTU ID/ID/' "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.pre" \
-e 's/OTU_//' | sort -n | sed -e 's/^/OTU_/' > "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.txt"

###     Preparing OTU table for R

cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.txt" "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table_R.txt"

###    Assigning taxonomy 

echo -e "\n#Assigning taxonomy"

cut -d ";" -f1 "${WKDIR}/output_data/trimmed/VSEARCH/filtered_OTU.fasta" > "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU.fasta"

        # assigning taxonomy by translated nucleotide query wait protein database
        blastx \
                -query "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU.fasta" \
                -db "/home/$user/acetoscan/acetobase/AcetoBaseV1" \
                -task blastx \
                -max_target_seqs 1 \
                -num_threads "${THREADS}" \
                -evalue 1e-9 \
                -out "${WKDIR}/output_data/trimmed/VSEARCH/OTUblast.txt.tmp" \
                -outfmt "6 qseqid saccver pident"

###    Preparing OTU taxonomy table

sed -e 's/;tax=/,/g' "${WKDIR}/output_data/trimmed/VSEARCH/OTUblast.txt.tmp" | \
sed '1s/^/#OTU,Subject_Accession,Kingdom,Phylum,Class,Order,Family,Genus,Species,Percentage_identity\n/' > "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_pre"

#    making tab to comma
sed -e 's/\t/,/g' "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_pre" > "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_full.csv"

###    fixing taxonomy to OTU fasta header 

cd "${WKDIR}/output_data/trimmed/VSEARCH/" 
if ! cd "${WKDIR}/output_data/trimmed/VSEARCH/" ; then
    echo "Error: could not cd to ${WKDIR}/output_data/trimmed/VSEARCH/"
    exit 1
fi

###     Making Tax table
sed 's/;tax=/\t/g' OTUblast.txt.tmp | \
    awk -F "\t" '{print $1,$3,$4}' | \
    sed -e '1s/^/OTU_ID,Kingdom,Phylum,Class,Order,Family,Genus,Species,Percentage_identity \n/' \
        -e 's/ /,/g' > FTHFS_TAX_table.txt

###    Preparing the input for R analysis

sed 's/,/\t/g' "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table.txt" | \
    awk 'NF{NF--};1' | \
    sed 's/ /\t/g'> "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_R.txt"

###    Preparing input for R analysis

mkdir -v -p "${WKDIR}/output_data/trimmed/VSEARCH/Visualization"
if ! cd "${WKDIR}/output_data/trimmed/VSEARCH/Visualization" ; then
    echo "Error: could not cd to ${WKDIR}/output_data/trimmed/VSEARCH/Visualization"
    exit 1
fi

cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table_R.txt" .
cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_R.txt" .
cp "/home/$user/acetoscan/acetoscan_bin/AcetoScan_Visualization.R" .

###     Running R script

RPATH=$(which R)
echo -e "\n#Preparing graphics"

echo -ne "\n#In case of execution halt, access data in path ${WKDIR}/output_data/trimmed/VSEARCH/"

###     Rscript not working

"${RPATH}" \
    --slave \
    --no-restore \
    --silent \
    --quiet \
    --file="AcetoScan_Visualization.R" > /dev/null

###    Putting everything together in a Result DIRECTORY = acetoscan_result or Visualization

mkdir -v -p "${WKDIR}/acetoscan_result"
cd "${WKDIR}/acetoscan_result" 

        #       result files

cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU.fasta" .
cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_OTU_table.txt" .
cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table_full.csv" .
cp "${WKDIR}/output_data/trimmed/VSEARCH/FTHFS_TAX_table.txt" .

        #       graphics

if [ -f "${WKDIR}/output_data/trimmed/VSEARCH/Visualization/6_Species_barplot.html" ]; then
        cp ${WKDIR}/output_data/trimmed/VSEARCH/Visualization/* .
        rm AcetoScan_Visualization.R
        echo "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.=================================================="
        echo "#Final results are in directory \"acetoscan_result\" in path ${WKDIR}/acetoscan_result"
        echo "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.=================================================="
else
        rm AcetoScan_Visualization.R        
        echo "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.=================================================="
        echo "#Final results are in directory \"Visualization\" in path ${WKDIR}/output_data/trimmed/VSEARCH/Visualization/"
        echo "#And OTU table and TAX table in \"acetoscan_result\" in path ${WKDIR}/acetoscan_result"
        echo "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.=================================================="
fi

###    Getting final information

end=$(date +%s) # end time of script
runtime=$(((end - start))) # calculate runtime
echo -e "\n#Acetoscan runtime: ${runtime} seconds"

###    End of script
