#!/bin/bash

#   File: acetotree
#   Last modified: tor  2 jul 2020 14:08:50 CEST
#   Sign: Abhi

### Setting colour variables

    RESTORE='\033[0m'
    YELLOW='\033[01;33m'
    LRED='\033[01;31m'

### Set pipefail

    set -euo pipefail

### acetotree script

    echo -e "${LRED}\
 ________________________________________________________
|     _    ____ _____ _____ ___ _____ ____  _____ _____  |
|    / \  / ___| ____|_   _/ _ \_   _|  _ \| ____| ____| |
|   / _ \| |   |  _|   | || | | || | | |_) |  _| |  _|   |
|  / ___ \ |___| |___  | || |_| || | |  _ <| |___| |___  |
| /_/   \_\____|_____| |_| \___/ |_| |_| \_\_____|_____| |
|________________________________________________________|
${RESTORE}\n#\t${YELLOW}©Abhijeet Singh${RESTORE}
#\t${YELLOW}-abhijeetsingh.aau@gmail.com${RESTORE}
#\t${YELLOW}-acetoscan version - 1.0${RESTORE}
"

### Recording the time when the script was started

    start=$(date +%s) #start time of script

### Variable for the date

    DATE=$(date +"%Y%m%d_%H_%M_%S")

### Username

    user="${SUDO_USER:-${USER}}"

### Setting up variables

    input_file=""
    output_file=""
    evalue=""
    threads=""
    bootstr=""

### Defaults variables

    output_file_def="acetotree_${DATE}"
    version_def="1.0"
    evalue_def="1e-3"
    bootstr_def="1000"

    #   Getting processors information

        threads_def=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null || getconf _NPROCESSORS_ONLN 2> /dev/null)

### Defining flags

    #   Function

        usage() {
            echo -e "\tUsage\t: $0 -i </input path/input file> [-o <output path/output file>] [-e <E-value>] [-B <bootstrap value >] [-P 8]\n\n"
            echo -e "\tExample\t: $0 -i /path/<input file>/ [-o /path/<output file>/] [-e 1e-3] [-B 1000] [-P 8]\n\n###" 1>&2;
            return 1;
        }

    #   Flags

        while getopts "i:o:e:B:P:hvCX" flags; do
                case "${flags}" in

                    i)
                        input_file=${OPTARG}
                        ;;
                    o)
                        output_file=${OPTARG}
                        ;;
                    e)
                        evalue=${OPTARG}
                        ;;
                    B)
                        bootstr=${OPTARG}
                        ;;
                    P)
                        threads=${OPTARG}
                        ;;
                    h)
                        echo -e "#\tExample\t: $0 -i /path/<input_file> [-o /path/<output_file>] [-e 1e-3] [-B 1000] [-P 8]\n\n"
                        echo -e "\t-i\tInput file - multifasta file"
                        echo -e "\t-o\tOutput file\n\t\t\t:default = acetotree_<date>_<time>.fasta\n\t\t\t:default = acetotree_<date>_<time>.csv\n\t\t\t:default = acetotree_<date>_<time>.aln\n\t\t\t:default = acetotree_<date>_<time>.tree"
                        echo -e "\t-e\tE-value\n\t\t\t:default evalue = 1e-3"
                        echo -e "\t-B\tBootstrap value\n\t\t\t:default bootstrap = 1000"
                        echo -e "\t-P\tParallel processes/threads\n\t\t\t:default no. of parallels = all available threads"
                        echo -e "\t-h\tPrint help"
                        echo -e "\t-X\tPrint AcetoScan commands"
                        echo -e "\t-v\tPrint AcetoScan version"
                        echo -e "\t-C\tPrint AcetoScan citation\n\n###"
                        exit
                        ;;
                    v)
                        echo -e "#\tAcetoScan version: ${YELLOW}${version_def}${RESTORE}"
                        echo -e "#\tVisit \"${YELLOW}https://acetobase.molbio.slu.se/${RESTORE}\" for more information.\n\n###"
                        exit
                        ;;
                    C)
                        echo -e "#\tCitations: If you use ${YELLOW}AcetoScan pipeline${RESTORE}, please cite as:\n"
                        echo -e "#\tAcetoScan:"
                        echo -e "\tAbhijeet Singh, Johan A. A. Nylander, Anna Schnürer, Bettina Müller"
                        echo -e "\tHigh throughput sequencing and automated analysis of formyltetrahydrofolate"
                        echo -e "\tsynthetase (FTHFS) gene amplicons to estimate acetogenic population dynamics,"
                        echo -e "\t<Journal Name>, Volume <2020>, <2020>, <webadress>\n"

                        echo -e "#\tAcetoBase:"
                        echo -e "\tAbhijeet Singh, Bettina Müller, Hans-Henrik Fuxelius, Anna Schnürer"
                        echo -e "\tAcetoBase: a functional gene repository and database for"
                        echo -e "\tformyltetrahydrofolate synthetase sequences,"
                        echo -e "\tDatabase, Volume 2019, 2019, baz142, https://doi.org/10.1093/database/baz142\n\n###"
                        exit
                        ;;
                    X)
                        echo -e "#\tAcetoScan commands:\n"
                        echo -e "\tacetoscan\t- for complete processing of raw illumina MiSeq output data"
                        echo -e "\tacetocheck\t- for processing fasta sequences and filtering out non-target sequences"
                        echo -e "\tacetotax\t- acetocheck + taxonomic assignments"
                        echo -e "\tacetotree\t- acetotax + phylogenetic tree generation\n\n###"
                        exit
                        ;;
                    *)
                        usage
                        exit
                        ;;
                    :)
                        usage
                        exit
                        ;;
                    \?)
                        usage
                        exit
                        ;;
                esac
            done

    shift $((OPTIND-1))

### Check for input options

    if ((OPTIND == 1));then
    echo -e "\n#\t${LRED}Input file not provided, Aborting!!!\n###\n${RESTORE}"
        echo ""
        usage
        exit 1
    fi

###    Getting input

    #   Check if input file provided

        if [ -z "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file not provided, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        fi

    #   Check if input file is accessible

        if [ ! -f "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file ${input_file} could not be found, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        else
            #   Making variable paths

                input_path=$(dirname "$(realpath "${input_file}")")
                filename=$(basename "${input_file}")

            #   Checking file contents

                echo -e "\n#\tContents of input file ${YELLOW}$(basename "${input_file}")${RESTORE}"

            #   Counting number of bases

                npos=$(grep -v '>' "${input_file}" | wc | awk '{print $3-$1}')

            #   Counting number of sequences

                nseq=$(grep -c '>' "${input_file}")

            #   Displaying file contents

                echo -e "#\t${YELLOW}${npos}${RESTORE} bases in ${YELLOW}${nseq}${RESTORE} sequences for ${filename}"
        fi

### Generating log file

    exec > >(tee -a "${input_path}/acetotree_${DATE}" )
    exec 2> >(tee -a "${input_path}/acetotree_${DATE}" >&2)

### Checking output path

    output_path=$(dirname "$(realpath "${output_file}")")

### Checking output file provided or using default

    if [ "$output_file" == "" ]; then
        output_file="${output_file_def}"
        echo -e "\n#\tUsing default output file:"
        echo -e "\t\t${YELLOW}${output_file_def}.fasta${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file_def}.csv${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file_def}.aln${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file_def}.tree${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file_def}.log${RESTORE}"
    else
        output_tmp1=$(basename ${output_file})
        output_tmp2=${output_tmp1%.*}
        output_file=${output_tmp2}
        echo -e "\n#\tOutput files:"
        echo -e "\t\t${YELLOW}${output_file}.fasta${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file}.csv${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file}.aln${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file}.tree${RESTORE}"
        echo -e "\t\t${YELLOW}acetotree_${DATE}.log${RESTORE}"
    fi

### Checking evalue

    if [ "$evalue" == "" ]; then
        evalue="$evalue_def"
        echo -e "\n#\tUsing default evalue: ${YELLOW}${evalue_def}${RESTORE}"
    else
        echo -e "\n#\tE-value: ${YELLOW}$evalue${RESTORE}"
    fi

### Checking bootstrap value

    if [ "$bootstr" == "" ]; then
        bootstr="$bootstr_def"
        echo -e "\n#\tUsing default bootstrap value: ${YELLOW}${bootstr_def}${RESTORE}"
    else
        echo -e "\n#\tBootstrap value: ${YELLOW}$bootstr${RESTORE}"
    fi

### Checking number of threads

    if [ "$threads" == "" ]; then
        threads="$threads_def"
        echo -e "\n#\tUsing default number of threads: ${YELLOW}${threads_def}${RESTORE}"
    else
        echo -e "\n#\tUsing number of threads: ${YELLOW}${threads}${RESTORE}"
    fi

### Checking dependencies

    echo -e "\n#\t${YELLOW}Performing dependencies check${RESTORE}"
    export PATH="/Users/${user}/acetoscan/bin/:${PATH}"
    export PATH="/Users/${user}/acetoscan/scripts/:${PATH}"
    AcetoScan_software_check.sh # <= External script

### Making a new temporary file

    tempfile1="${filename}.ack"

### Cleaning and preparing input file

    perl -pe '/^>/ ? print "\n" : chomp' "${input_file}" | \
        sed '/^$/d;s/ /_/g;s/,/_/g;s/:/_/g;s/(/_/g;s/)/_/g;s/__*/_/g' > "${input_path}/${tempfile1}"

### Function for the Spinner

    spin=( '/' '-' '\' '|' )

    processing() {
        while true ; do
            for s in "${spin[@]}" ; do
                echo -ne "\r[Processing:]$s"
                sleep 0.25
            done
        done &
    }

### Begin Longest best frame analysis <- from external script

    echo -e "\n#\t${YELLOW}Performing longest best frame analysis${RESTORE}"
    echo -e "\n#\t${LRED}OBS: This might take a while!\n${RESTORE}"

    #   Defining best frame function

        bestframe() {

        #   Starting spinner for best frame script

            processing
            pid=$!
            disown

        #   Call AcetoScan_longorf.pl external script

            find "${input_path}" -name "${tempfile1}" \
            -exec AcetoScan_longorf.pl {} > "${input_path}/${tempfile1}.bst" \; # <============= external script

        #   Checking if longorf-acetoscan output is not empty

            if [ ! -s "${input_path}/${tempfile1}.bst" ]; then
                echo -e "\n#\t${LRED}No sequence to proceed, Aborting!!!\n###\n${RESTORE}"
                exit 1
            fi

        #   Closing spinner for best frame script
            echo -ne "Done\n"
            kill "$pid"
    }

    #   Calling best frame function to do the job

        bestframe

### Filtering non target sequences with BlastX from NCBI Blast+ (2.8.1)

    echo -e "\n#\t${YELLOW}Filtering non target sequences${RESTORE}"
    echo -e "\n#\t${LRED}OBS: This might take a while!\n${RESTORE}"

    #   Defining the variable path

        path_acetobase="/Users/${user}/acetoscan/db/AcetoBase"

    #   Defining blastx filtering function

        blastxfilter() {

        #   Starting spinner for best frame script

            processing
            pid=$!
            disown

        #   Filtering non target sequences

            blastx \
                -query "${input_path}/${tempfile1}.bst" \
                -db "${path_acetobase}" \
                -task blastx \
                -max_target_seqs 1 \
                -num_threads "${threads}" \
                -evalue "${evalue}" \
                -out "${input_path}/b4fl.ack" \
                -outfmt "6 qseqid" 2> /dev/null

        #   Extracting target sequences

            printf '' > "${input_path}/filt.ack"
            while IFS= read -r line; do
                grep -w -A 1 "$line" "${input_path}/${tempfile1}.bst" >> "${input_path}/filt.ack"
            done < "${input_path}/b4fl.ack"

        #   Closing spinner for blastx filtering

            echo -ne "Done\n"
            kill $pid
        }

    #   Calling best frame function to do the job

        blastxfilter

### Assigning taxonomy

    echo -e "\n#\t${YELLOW}Assigning taxonomy${RESTORE}"
    echo -e "\n#\t${LRED}OBS: This might take a while!${RESTORE}\n"

    #   Defining taxassign function

        taxassign() {

            #   Starting spinner for taxonomy assignment

                processing
                pid=$!
                disown

            #   assigning taxonomy by translated nucleotide query with protein database

                blastx \
                    -query "${input_path}/filt.ack" \
                    -db "${path_acetobase}" \
                    -task blastx \
                    -max_target_seqs 1 \
                    -num_threads "${threads}" \
                    -evalue 1e-3 \
                    -out "${input_path}/tax.tmp" \
                    -outfmt "6 qseqid saccver pident evalue qlen length bitscore qseq" 2> /dev/null

            #   Removing duplicates

                awk '!a[$1]++' "${input_path}/tax.tmp" > "${input_path}/tax2.tmp"

            #   Preparing OTU taxonomy table

                sed -e 's/;tax=/,/g' "${input_path}/tax2.tmp" | \
                sed '1s/^/OTU,Subject_Accession,Kingdom,Phylum,Class,Order,Family,Genus,Species,Percentage_identity,Evalue,Query_length,Alignment_length[blastx],Bitscore,Query_seq\n/' | \
                sed -e 's/\t/,/g' | \
                sed 's/d://g' | \
                sed 's/p://g' | \
                sed 's/c://g' | \
                sed 's/o://g' | \
                sed 's/f://g' | \
                sed 's/g://g' | \
                sed 's/s://g' | \
                sed 's/None/NA/g' > "${input_path}/taxtab.csv"

            #   Closing spinner for taxonomy assignment

                echo -ne "Done\n"
                kill $pid

        }

    #   Calling tax assign function to do the job

        taxassign

### Multiple sequence alignment by mafft

    echo -e "\n#\t${YELLOW}Performing Multiple Sequence Alignment${RESTORE}\n"

    mafft \
        --reorder \
        --retree 5 \
        --maxiterate ${bootstr} \
        --globalpair \
        --thread "${threads}" \
        "${input_path}/filt.ack" > "${input_path}/att.aln"

### Phylogenetic tree construction by FastTree

    echo -e "\n#\t${YELLOW}Preparing phylogenetic tree${RESTORE}\n"

    fasttree \
        -nt \
        -gtr \
        -cat 20 \
        -mlacc 10 \
        -mlnni 10 \
        -spr 5 \
        -gamma \
        -bionj \
        -boot ${bootstr} "${input_path}/att.aln" > "${input_path}/att.tree"

### Renaming the required file to desired output file

    mv "${input_path}/filt.ack" "${output_path}/${output_file}.fasta"
    mv "${input_path}/taxtab.csv" "${output_path}/${output_file}.csv"
    mv "${input_path}/att.aln" "${output_path}/${output_file}.aln"
    mv "${input_path}/att.tree" "${output_path}/${output_file}.tree"

### Removing temporary files

    find "${input_path}" -type f -name "${tempfile1}" -exec rm {} \;
    find "${input_path}" -type f -name "${tempfile1}.bst" -exec rm {} \;
    find "${input_path}" -type f -name "b4fl.ack" -exec rm {} \;
    find "${input_path}" -type f -name "tax.tmp" -exec rm {} \;
    find "${input_path}" -type f -name "tax2.tmp" -exec rm {} \;

### Getting final information

    #   End time of script

        end=$(date +%s)

    #   Calculate runtime

        runtime=$(((end - start)))

    #   Data size

        pros_data_size=$(find "${input_path}" -iname "${filename}" -print0 | du --files0-from=- -ch | grep "total" | cut -f1)

    #   Displaying process info

            echo -e "\n#\tacetotree processed:\n"
            echo -e "\t\t${YELLOW}${filename}${RESTORE}"
            echo -e "\t\t[bases]\t\t- ${YELLOW}${npos}${RESTORE}"
            echo -e "\t\t[sequences]\t- ${YELLOW}${nseq}${RESTORE}"
            echo -e "\t\t[size]\t\t- ${YELLOW}${pros_data_size}${RESTORE}"
            echo -e "\t\t[time(sec)]\t- ${YELLOW}${runtime}${RESTORE}"

### Outfile file stat

    nseqOut=$(grep -c '>' "${output_path}/${output_file}.fasta")

### Number of unspecific sequences

    numOut=$(( "${nseq}" - "${nseqOut}" ))

### Output file stat reporting

    echo -e "\n\tInput\t\t- ${YELLOW}${nseq} sequences ${RESTORE}"
    echo -e "\tOutput\t\t- ${YELLOW}${nseqOut} sequences ${RESTORE}"
    echo -e "\t${LRED}Non-targets\t- ${numOut} sequences ${RESTORE}"

### Taxonomic information

    echo -e "\n#\tTaxonomic assignment"
    echo -e "\t[sequences]\t- ${YELLOW} ${nseqOut} ${RESTORE}"

### Phylogenetic tree information

    echo -e "\n#\tPhylogenetic tree"
    echo -e "\n\t${YELLOW}${output_file}.tree${RESTORE}"
    echo -e "\t[Distances] - Jukes-Cantor"
    echo -e "\t[Topology refinement] - maximum-likelihood with nearest-neighbor interchanges - ML-NNI (10 rounds)"
    echo -e "\t[Topology refinement] - Subtree pruning and Regrafting - SPR (5 rounds)"

    echo -e "\t[Model fitting] - Generalized Time-Reversible (GTR)"
    echo -e "\t[Model approximation] - CAT (site heterogeneous categories) (20 rounds)"
    echo -e "\t[Bootstrap] - ${bootstr} (default: 1000 rounds)"
    echo -e "\t[Distance optimization] - BIONJ"

### Greeting

    echo -e "\n#\t${YELLOW}${user}${RESTORE}, Thanks for using ${YELLOW}\"AcetoScan/acetotree\"${RESTORE}\n\n###"

### Fixing log file

    #   Deleting special characters

        find "${input_path}" -name "acetotree_${DATE}" -exec sed -e 's/\x1B\[[0-9;]\+[A-Za-z]//g;/Processing:/d;/ambiguous characters./,/done./{//!d};/STEP/d;/(thread/d;/Processing:/d;/Constructing a UPGMA tree/,/done./{//!d};/seconds: Top hits for/d;/Joined/d;/NNI round/d;/seconds: SPR round/d;/ML Lengths/d;/NNI round/d;/Optimizing GTR model/d;/Site likelihoods with/d;/ML split tests for/d' {} > "${input_path}/acetotree_${DATE}.tmp" \;

    #   Deleting temorary file

        find "${input_path}" -name "acetotree_${DATE}" -exec rm {} \;

    #   Moving log file to destination

        mv "${input_path}/acetotree_${DATE}.tmp" "${output_path}/acetotree_${DATE}.log"

### End of script

    exit 0
