#!/bin/bash

#   File: acetocheck
#   Last modified: Thu Sep  3 12:52:30 CEST 2020
#   Sign: Abhi

### Setting colour variables

    RESTORE='\033[0m'
    YELLOW='\033[01;33m'
    LRED='\033[01;31m'

### Set pipefail

    set -euo pipefail

### acetocheck script

    echo -e "${LRED}\
 _____________________________________________________________
|     _    ____ _____ _____ ___   ____ _   _ _____ ____ _  __ |
|    / \  / ___| ____|_   _/ _ \ / ___| | | | ____/ ___| |/ / |
|   / _ \| |   |  _|   | || | | | |   | |_| |  _|| |   | ' /  |
|  / ___ \ |___| |___  | || |_| | |___|  _  | |__| |___| . \  |
| /_/   \_\____|_____| |_| \___/ \____|_| |_|_____\____|_|\_\ |
|_____________________________________________________________|
${RESTORE}\n#\t${YELLOW}©Abhijeet Singh${RESTORE}
#\t${YELLOW}-abhijeetsingh.aau@gmail.com${RESTORE}
#\t${YELLOW}-acetoscan version - 1.0${RESTORE}
"

### Recording the time when the script was started

    start=$(date +%s) #start time of script

### Variable for the date

    DATE=$(date +"%Y%m%d_%H_%M_%S")

### Username

    user="${SUDO_USER:-${USER}}"

### Setting up variables

    input_file=""
    output_file=""
    evalue=""
    threads=""

###    Defaults variables

    output_file_def="acetocheck_${DATE}"
    version_def="1.0"
    evalue_def="1e-3"

    #   Getting parallel processors information

        threads_def=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null || getconf _NPROCESSORS_ONLN 2> /dev/null)

### Defining flags

    #   Function

        usage() {
            echo -e "\tUsage\t: $0 -i </input path/input file> [-o <output path/output file>] [-e <E-value>] [-P <parallel processes/threads>]\n\n"
            echo -e "\tExample\t: $0 -i /path/<input file> [-o /path/<output file>] [-e 1e-3] [-P 8 ]" 1>&2;
            return 1;
        }

    #   Flags

        while getopts "i:o:e:P:hvCX" flags; do
            case "${flags}" in

                i)
                    input_file=${OPTARG}
                    ;;
                o)
                    output_file=${OPTARG}
                    ;;
                e)
                    evalue=${OPTARG}
                    ;;
                P)
                    threads=${OPTARG}
                    ;;
                h)
                    echo -e "#\tExample\t: $0 -i /path/<input_file> [-o /path/<output_file>] [-e 1e-3] [-P 8]\n\n"
                    echo -e "\t-i\tInput file - multifasta file"
                    echo -e "\t-o\tOutput file\n\t\t\t:default = acetocheck_<date>_<time>.fasta"
                    echo -e "\t-e\tE-value\n\t\t\t:default evalue = 1e-3"
                    echo -e "\t-P\tParallel processes/threads\n\t\t\t:default no. of parallels = all available threads"
                    echo -e "\t-h\tPrint help"
                    echo -e "\t-X\tPrint AcetoScan commands"
                    echo -e "\t-v\tPrint AcetoScan version"
                    echo -e "\t-C\tPrint AcetoScan citation\n\n###"
                    exit
                    ;;
                v)
                    echo -e "#\tAcetoScan version: ${YELLOW}${version_def}${RESTORE}"
                    echo -e "#\tVisit \"${YELLOW}https://github.com/abhijeetsingh1704/AcetoScan${RESTORE}\"\n\n###"
                    echo -e "#\tVisit \"${YELLOW}https://acetobase.molbio.slu.se/${RESTORE}\" for more information.\n\n###"
                    exit
                    ;;
                C)
                    echo -e "#\tCitations: If you use ${YELLOW}AcetoScan pipeline${RESTORE}, please cite as:\n"
                    echo -e "#\tAcetoScan:"
                    echo -e "\tAbhijeet Singh, Johan A. A. Nylander, Anna Schnürer, Erik Bongcam-Rudloff, Bettina Müller (2020)"
                    echo -e "\tHigh throughput sequencing and unsupervised analysis of formyltetrahydrofolate"
                    echo -e "\tsynthetase (FTHFS) gene amplicons to estimate acetogenic community structure"
                    echo -e "\tFront. Microbiol, Volume 11(2066), doi:10.3389/fmicb.2020.02066"
                    echo -e "\thttps://www.frontiersin.org/articles/10.3389/fmicb.2020.02066/full\n"

                    echo -e "#\tAcetoBase:"
                    echo -e "\tAbhijeet Singh, Bettina Müller, Hans-Henrik Fuxelius, Anna Schnürer"
                    echo -e "\tAcetoBase: a functional gene repository and database for"
                    echo -e "\tformyltetrahydrofolate synthetase sequences,"
                    echo -e "\tDatabase, Volume 2019, 2019, baz142, https://doi.org/10.1093/database/baz142\n\n###"
                    exit
                    ;;
                X)
                    echo -e "#\tAcetoScan commands:\n"
                    echo -e "\tacetoscan\t- for complete processing of raw illumina MiSeq output data"
                    echo -e "\tacetocheck\t- for processing fasta sequences and filtering out non-target sequences"
                    echo -e "\tacetotax\t- acetocheck + taxonomic assignments"
                    echo -e "\tacetotree\t- acetotax + phylogenetic tree generation\n\n###"
                    exit
                    ;;
                *)
                    usage
                    exit
                    ;;
                :)
                    usage
                    exit
                    ;;
                \?)
                    usage
                    exit
                    ;;
            esac
        done

    shift $((OPTIND-1))


### Check for input options

    if ((OPTIND == 1)); then
        echo -e "\n#\t${LRED}No input provided, Aborting!!!\n###\n${RESTORE}"
        echo ""
        usage
        exit 1
    fi

###    Getting input

    #   Check if input file provided

        if [ -z "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file not provided, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        fi

    #   Check if input file is accessible

        if [ ! -f "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file ${input_file} could not be found, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        else
            #   Making variable paths

                input_path=$(dirname "$(realpath "${input_file}")")
                filename=$(basename "${input_file}")

            #   Checking file contents

                echo -e "\n#\tContents of input file ${YELLOW}$(basename "${input_file}")${RESTORE}"

            #   Counting number of bases

                npos=$(grep -v '>' "${input_file}" | wc | awk '{print $3-$1}')

            #   Counting number of sequences

                nseq=$(grep -c '>' "${input_file}")

            #   Displaying file contents

                echo -e "#\t${YELLOW}${npos}${RESTORE} bases in ${YELLOW}${nseq}${RESTORE} sequences for ${filename}"
        fi

### Generating log file

    exec > >(tee -a "${input_path}/acetocheck_${DATE}" )
    exec 2> >(tee -a "${input_path}/acetocheck_${DATE}" >&2)

### Checking output path

    output_path=$(dirname "$(realpath "${output_file}")")

### Checking output file provided or using default

    if [ "$output_file" == "" ]; then
        output_file="${output_file_def}"
        echo -e "\n#\tUsing default output file:"
        echo -e "\t\t${YELLOW}${output_file_def}.fasta${RESTORE}"
        echo -e "\t\t${YELLOW}${output_file_def}.log${RESTORE}"
    else
        output_tmp1=$(basename ${output_file})
        output_tmp2=${output_tmp1%.*}
        output_file=${output_tmp2}
        echo -e "\n#\tOutput files:"
        echo -e "\t\t${YELLOW}${output_file}.fasta${RESTORE}"
        echo -e "\t\t${YELLOW}acetocheck_${DATE}.log${RESTORE}"
    fi

### Checking evalue

    if [ "$evalue" == "" ]; then
        evalue="$evalue_def"
        echo -e "\n#\tUsing default evalue: ${YELLOW}${evalue_def}${RESTORE}"
    else
        echo -e "\n#\tE-value: ${YELLOW}$evalue${RESTORE}"
    fi

### Checking number of threads

    if [ "$threads" == "" ]; then
        threads="$threads_def"
        echo -e "\n#\tUsing default number of threads: ${YELLOW}${threads_def}${RESTORE}"
    else
        echo -e "\n#\tUsing number of threads: ${YELLOW}${threads}${RESTORE}"
    fi

### Checking dependencies

    echo -e "\n#\t${YELLOW}Performing dependencies check${RESTORE}"
    export PATH="/home/${user}/acetoscan/bin/:${PATH}"
    export PATH="/home/${user}/acetoscan/scripts/:${PATH}"

    # running check

    AcetoScan_software_check.sh # <= External script

### Making a new temporary file

    tempfile1="${filename}.ack"

### Cleaning and preparing input file

    perl -pe '/^>/ ? print "\n" : chomp' "${input_file}" | \
        sed '/^$/d;s/ /_/g;s/,/_/g;s/:/_/g;s/(/_/g;s/)/_/g;s/__*/_/g' > "${input_path}/${tempfile1}"

### Function for the Spinner

    spin=( '/' '-' '\' '|' )

    processing() {
        while true ; do
            for s in "${spin[@]}" ; do
                echo -ne "\r[Processing:]$s"
                sleep 0.25
            done
        done &
    }

### Begin Longest best frame analysis <- from external script

    echo -e "\n#\t${YELLOW}Performing longest best frame analysis${RESTORE}"
    echo -e "\n#\t${LRED}OBS: This might take a while!\n${RESTORE}"

    #   Defining best frame function

        bestframe() {

        #   Starting spinner for best frame script

            processing
            pid=$!
            disown

        #   Call AcetoScan_longorf.pl external script

            find "${input_path}" -name "${tempfile1}" \
            -exec AcetoScan_longorf.pl {} > "${input_path}/${tempfile1}.bst" \; # <============= external script

        #   Checking if longorf-acetoscan output is not empty

            if [ ! -s "${input_path}/${tempfile1}.bst" ]; then
                echo -e "\n#\t${LRED}No sequence to proceed, Aborting!!!\n###\n${RESTORE}"
                exit 1
            fi

        #   Closing spinner for best frame script
            echo -ne "Done\n"
            kill "$pid"
    }

    #   Calling best frame function to do the job

        bestframe

### Filtering non target sequences with BlastX from NCBI Blast+ (2.8.1)

    echo -e "\n#\t${YELLOW}Filtering non target sequences${RESTORE}"
    echo -e "\n#\t${LRED}OBS: This might take a while!\n${RESTORE}"

    #   Defining the variable path

        path_acetobase="/home/${user}/acetoscan/db/AcetoBase"

    #   Defining blastx filtering function

        blastxfilter() {

        #   Starting spinner for best frame script

            processing
            pid=$!
            disown

        #   Filtering non target sequences

            blastx \
                -query "${input_path}/${tempfile1}.bst" \
                -db "${path_acetobase}" \
                -task blastx \
                -max_target_seqs 1 \
                -num_threads "${threads}" \
                -evalue "${evalue}" \
                -out "${input_path}/b4fl.ack" \
                -outfmt "6 qseqid" 2> /dev/null

        #   Extracting target sequences

            printf '' > "${input_path}/filt.ack"
            while IFS= read -r line; do
                grep -w -A 1 "$line" "${input_path}/${tempfile1}.bst" >> "${input_path}/filt1.ack"
            done < "${input_path}/b4fl.ack"

        #   remove duplicate sequences

            awk '/^>/{f=!d[$1];d[$1]=1}f' "${input_path}/filt1.ack" > "${input_path}/filt.ack"

        #   Closing spinner for blastx filtering

            echo -ne "Done\n"
            kill $pid
        }

    #   Calling best frame function to do the job

        blastxfilter


### Renaming the required file to desired output file

    mv "${input_path}/filt.ack" "${output_path}/${output_file}.fasta"

### Removing temporary files

    find "${input_path}" -type f -name "${tempfile1}" -exec rm {} \;
    find "${input_path}" -type f -name "${tempfile1}.bst" -exec rm {} \;
    find "${input_path}" -type f -name "b4fl.ack" -exec rm {} \;
    find "${input_path}" -type f -name "filt1.ack" -exec rm {} \;

### Getting final information

    #   End time of script

        end=$(date +%s)

    #   Calculate runtime

        runtime=$(((end - start)))

    #   Data size

        pros_data_size=$(find "${input_path}" -iname "${filename}" -print0 | du --files0-from=- -ch | grep "total" | cut -f1)

    #   Displaying process info

            echo -e "\n#\tacetocheck processed:\n"
            echo -e "\t\t${YELLOW}${filename}${RESTORE}"
            echo -e "\t\t[bases]\t\t- ${YELLOW}${npos}${RESTORE}"
            echo -e "\t\t[sequences]\t- ${YELLOW}${nseq}${RESTORE}"
            echo -e "\t\t[size]\t\t- ${YELLOW}${pros_data_size}${RESTORE}"
            echo -e "\t\t[time(sec)]\t- ${YELLOW}${runtime}${RESTORE}"

### Outfile file stat

    nseqOut=$(grep -c '>' "${output_path}/${output_file}.fasta")

### Number of unspecific sequences

    numOut=$(( "${nseq}" - "${nseqOut}" ))

### Output file stat reporting

    echo -e "\n\tInput\t\t- ${YELLOW}${nseq} sequences ${RESTORE}"
    echo -e "\tOutput\t\t- ${YELLOW}${nseqOut} sequences ${RESTORE}"
    echo -e "\t${LRED}Non-targets\t- ${numOut} sequences ${RESTORE}"

### Greeting

    echo -e "\n#\t${YELLOW}${user}${RESTORE}, Thanks for using ${YELLOW}\"AcetoScan/acetocheck\"${RESTORE}\n\n###"

### Fixing log file

    #   Deleting special characters

        find "${input_path}" -name "acetocheck_${DATE}" -exec sed -i 's/\x1B\[[0-9;]\+[A-Za-z]//g;/Processing:/d' {} \;

    #   Moving log file to destination

        mv "${input_path}/acetocheck_${DATE}" "${output_path}/acetocheck_${DATE}.log"

### End of script

    exit 0
